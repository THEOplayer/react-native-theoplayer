
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJniCpp.js
 */

#include "rntheo.h"

namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_playing(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "playing", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_skip(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "skip", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_currentAdBreak(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "currentAdBreak", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_currentAds(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "currentAds", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_scheduledAdBreaks(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "scheduledAdBreaks", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_schedule(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "schedule", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiContentTimeForStreamTime(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "daiContentTimeForStreamTime", "(DDLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiStreamTimeForContentTime(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "daiStreamTimeForContentTime", "(DDLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiSnapback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "daiSnapback", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiSetSnapback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "daiSetSnapback", "(DZ)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_addFriendlyObstruction(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "addFriendlyObstruction", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_removeAllFriendlyObstructions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "removeAllFriendlyObstructions", "(D)V", args, count, cachedMethodId);
}

NativeAdsModuleSpecJSI::NativeAdsModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["playing"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_playing};
  methodMap_["skip"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_skip};
  methodMap_["currentAdBreak"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_currentAdBreak};
  methodMap_["currentAds"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_currentAds};
  methodMap_["scheduledAdBreaks"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_scheduledAdBreaks};
  methodMap_["schedule"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_schedule};
  methodMap_["daiContentTimeForStreamTime"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_daiContentTimeForStreamTime};
  methodMap_["daiStreamTimeForContentTime"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_daiStreamTimeForContentTime};
  methodMap_["daiSnapback"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_daiSnapback};
  methodMap_["daiSetSnapback"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_daiSetSnapback};
  methodMap_["addFriendlyObstruction"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_addFriendlyObstruction};
  methodMap_["removeAllFriendlyObstructions"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_removeAllFriendlyObstructions};
}
static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_createTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "createTask", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_getInitialState(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getInitialState", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_renewLicense(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "renewLicense", "(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_pauseCachingTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "pauseCachingTask", "(Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_removeCachingTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "removeCachingTask", "(Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_startCachingTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "startCachingTask", "(Ljava/lang/String;)V", args, count, cachedMethodId);
}

NativeCacheModuleSpecJSI::NativeCacheModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["createTask"] = MethodMetadata {2, __hostFunction_NativeCacheModuleSpecJSI_createTask};
  methodMap_["getInitialState"] = MethodMetadata {0, __hostFunction_NativeCacheModuleSpecJSI_getInitialState};
  methodMap_["renewLicense"] = MethodMetadata {2, __hostFunction_NativeCacheModuleSpecJSI_renewLicense};
  methodMap_["pauseCachingTask"] = MethodMetadata {1, __hostFunction_NativeCacheModuleSpecJSI_pauseCachingTask};
  methodMap_["removeCachingTask"] = MethodMetadata {1, __hostFunction_NativeCacheModuleSpecJSI_removeCachingTask};
  methodMap_["startCachingTask"] = MethodMetadata {1, __hostFunction_NativeCacheModuleSpecJSI_startCachingTask};
}
static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_casting(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "casting", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastCasting(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "chromecastCasting", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayCasting(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "airplayCasting", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastState(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "chromecastState", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayState(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "airplayState", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastStart(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "chromecastStart", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastStop(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "chromecastStop", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastJoin(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "chromecastJoin", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastLeave(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "chromecastLeave", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayStart(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "airplayStart", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayStop(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "airplayStop", "(D)V", args, count, cachedMethodId);
}

NativeCastModuleSpecJSI::NativeCastModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["casting"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_casting};
  methodMap_["chromecastCasting"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastCasting};
  methodMap_["airplayCasting"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayCasting};
  methodMap_["chromecastState"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastState};
  methodMap_["airplayState"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayState};
  methodMap_["chromecastStart"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastStart};
  methodMap_["chromecastStop"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastStop};
  methodMap_["chromecastJoin"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastJoin};
  methodMap_["chromecastLeave"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastLeave};
  methodMap_["airplayStart"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayStart};
  methodMap_["airplayStop"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayStop};
}
static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_registerContentProtectionIntegration(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "registerContentProtectionIntegration", "(Ljava/lang/String;Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onBuildProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onBuildProcessed", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsCertificate(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onCertificateRequestProcessedAsCertificate", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsRequest(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onCertificateRequestProcessedAsRequest", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateResponseProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onCertificateResponseProcessed", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsLicense(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onLicenseRequestProcessedAsLicense", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsRequest(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onLicenseRequestProcessedAsRequest", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseResponseProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onLicenseResponseProcessed", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onExtractFairplayContentIdProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "onExtractFairplayContentIdProcessed", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

NativeContentProtectionModuleSpecJSI::NativeContentProtectionModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["registerContentProtectionIntegration"] = MethodMetadata {2, __hostFunction_NativeContentProtectionModuleSpecJSI_registerContentProtectionIntegration};
  methodMap_["onBuildProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onBuildProcessed};
  methodMap_["onCertificateRequestProcessedAsCertificate"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsCertificate};
  methodMap_["onCertificateRequestProcessedAsRequest"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsRequest};
  methodMap_["onCertificateResponseProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateResponseProcessed};
  methodMap_["onLicenseRequestProcessedAsLicense"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsLicense};
  methodMap_["onLicenseRequestProcessedAsRequest"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsRequest};
  methodMap_["onLicenseResponseProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseResponseProcessed};
  methodMap_["onExtractFairplayContentIdProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onExtractFairplayContentIdProcessed};
}
static facebook::jsi::Value __hostFunction_NativeEventBroadcastModuleSpecJSI_broadcastEvent(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "broadcastEvent", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

NativeEventBroadcastModuleSpecJSI::NativeEventBroadcastModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["broadcastEvent"] = MethodMetadata {2, __hostFunction_NativeEventBroadcastModuleSpecJSI_broadcastEvent};
}
static facebook::jsi::Value __hostFunction_NativePlaybackSettingsModuleSpecJSI_useFastStartup(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "useFastStartup", "(Z)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlaybackSettingsModuleSpecJSI_setLipSyncCorrection(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setLipSyncCorrection", "(D)V", args, count, cachedMethodId);
}

NativePlaybackSettingsModuleSpecJSI::NativePlaybackSettingsModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["useFastStartup"] = MethodMetadata {1, __hostFunction_NativePlaybackSettingsModuleSpecJSI_useFastStartup};
  methodMap_["setLipSyncCorrection"] = MethodMetadata {1, __hostFunction_NativePlaybackSettingsModuleSpecJSI_setLipSyncCorrection};
}
static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_version(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "version", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPreload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setPreload", "(DLjava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setCurrentTime(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setCurrentTime", "(DD)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPipConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setPipConfig", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setBackgroundAudioConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setBackgroundAudioConfig", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPresentationMode(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setPresentationMode", "(DLjava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setMuted(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setMuted", "(DZ)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPlaybackRate(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setPlaybackRate", "(DD)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSelectedAudioTrack(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setSelectedAudioTrack", "(DLjava/lang/Double;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSelectedVideoTrack(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setSelectedVideoTrack", "(DLjava/lang/Double;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSelectedTextTrack(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setSelectedTextTrack", "(DLjava/lang/Double;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSource(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setSource", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setTargetVideoQuality(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setTargetVideoQuality", "(DLcom/facebook/react/bridge/ReadableArray;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setVolume(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setVolume", "(DD)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setAspectRatio(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setAspectRatio", "(DLjava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setRenderingTarget(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setRenderingTarget", "(DLjava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setKeepScreenOn(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setKeepScreenOn", "(DZ)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPaused(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setPaused", "(DZ)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setTextTrackStyle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setTextTrackStyle", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setABRConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setABRConfig", "(DLcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

NativePlayerModuleSpecJSI::NativePlayerModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["version"] = MethodMetadata {0, __hostFunction_NativePlayerModuleSpecJSI_version};
  methodMap_["setPreload"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPreload};
  methodMap_["setCurrentTime"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setCurrentTime};
  methodMap_["setPipConfig"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPipConfig};
  methodMap_["setBackgroundAudioConfig"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setBackgroundAudioConfig};
  methodMap_["setPresentationMode"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPresentationMode};
  methodMap_["setMuted"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setMuted};
  methodMap_["setPlaybackRate"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPlaybackRate};
  methodMap_["setSelectedAudioTrack"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSelectedAudioTrack};
  methodMap_["setSelectedVideoTrack"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSelectedVideoTrack};
  methodMap_["setSelectedTextTrack"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSelectedTextTrack};
  methodMap_["setSource"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSource};
  methodMap_["setTargetVideoQuality"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setTargetVideoQuality};
  methodMap_["setVolume"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setVolume};
  methodMap_["setAspectRatio"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setAspectRatio};
  methodMap_["setRenderingTarget"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setRenderingTarget};
  methodMap_["setKeepScreenOn"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setKeepScreenOn};
  methodMap_["setPaused"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPaused};
  methodMap_["setTextTrackStyle"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setTextTrackStyle};
  methodMap_["setABRConfig"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setABRConfig};
}

std::shared_ptr<TurboModule> rntheo_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
  if (moduleName == "THEORCTAdsModule") {
    return std::make_shared<NativeAdsModuleSpecJSI>(params);
  }
  if (moduleName == "THEORCTCacheModule") {
    return std::make_shared<NativeCacheModuleSpecJSI>(params);
  }
  if (moduleName == "THEORCTCastModule") {
    return std::make_shared<NativeCastModuleSpecJSI>(params);
  }
  if (moduleName == "THEORCTContentProtectionModule") {
    return std::make_shared<NativeContentProtectionModuleSpecJSI>(params);
  }
  if (moduleName == "THEORCTEventBroadcastModule") {
    return std::make_shared<NativeEventBroadcastModuleSpecJSI>(params);
  }
  if (moduleName == "THEORCTPlaybackSettingsModule") {
    return std::make_shared<NativePlaybackSettingsModuleSpecJSI>(params);
  }
  if (moduleName == "THEORCTPlayerModule") {
    return std::make_shared<NativePlayerModuleSpecJSI>(params);
  }
  return nullptr;
}

} // namespace facebook::react
