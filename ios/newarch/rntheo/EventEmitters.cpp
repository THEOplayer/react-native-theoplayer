
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include "EventEmitters.h"


namespace facebook::react {

void THEOplayerRCTViewEventEmitter::onNativePlayerReady(OnNativePlayerReady $event) const {
  dispatchEvent("nativePlayerReady", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto version = jsi::Object(runtime);
  version.setProperty(runtime, "version", $event.version.version);
  version.setProperty(runtime, "playerSuiteVersion", $event.version.playerSuiteVersion);
  $payload.setProperty(runtime, "version", version);
}
{
  auto state = jsi::Object(runtime);
  
  $payload.setProperty(runtime, "state", state);
}
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeSourceChange(OnNativeSourceChange $event) const {
  dispatchEvent("nativeSourceChange", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeLoadStart(OnNativeLoadStart $event) const {
  dispatchEvent("nativeLoadStart", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeLoadedData(OnNativeLoadedData $event) const {
  dispatchEvent("nativeLoadedData", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeLoadedMetadata(OnNativeLoadedMetadata $event) const {
  dispatchEvent("nativeLoadedMetadata", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    auto textTracks = jsi::Array(runtime, $event.textTracks.size());
    size_t textTracksIndex = 0;
    for (auto textTracksValue : $event.textTracks) {
      auto textTracksObject = jsi::Object(runtime);
      textTracksObject.setProperty(runtime, "kind", textTracksValue.kind);
textTracksObject.setProperty(runtime, "label", textTracksValue.label);
textTracksObject.setProperty(runtime, "language", textTracksValue.language);
textTracksObject.setProperty(runtime, "id", textTracksValue.id);
textTracksObject.setProperty(runtime, "uid", textTracksValue.uid);
textTracksObject.setProperty(runtime, "mode", textTracksValue.mode);
textTracksObject.setProperty(runtime, "type", textTracksValue.type);

    auto cues = jsi::Array(runtime, textTracksValue.cues.size());
    size_t cuesIndex = 0;
    for (auto cuesValue : textTracksValue.cues) {
      auto cuesObject = jsi::Object(runtime);
      cuesObject.setProperty(runtime, "id", cuesValue.id);
cuesObject.setProperty(runtime, "uid", cuesValue.uid);
cuesObject.setProperty(runtime, "startTime", cuesValue.startTime);
cuesObject.setProperty(runtime, "endTime", cuesValue.endTime);
{
  auto content = jsi::Object(runtime);
  
  cuesObject.setProperty(runtime, "content", content);
}
cuesObject.setProperty(runtime, "startDate", cuesValue.startDate);
cuesObject.setProperty(runtime, "endDate", cuesValue.endDate);
cuesObject.setProperty(runtime, "classString", cuesValue.classString);
cuesObject.setProperty(runtime, "duration", cuesValue.duration);
cuesObject.setProperty(runtime, "plannedDuration", cuesValue.plannedDuration);
cuesObject.setProperty(runtime, "endOnNext", cuesValue.endOnNext);
{
  auto customAttributes = jsi::Object(runtime);
  
  cuesObject.setProperty(runtime, "customAttributes", customAttributes);
}
      cues.setValueAtIndex(runtime, cuesIndex++, cuesObject);
    }
    textTracksObject.setProperty(runtime, "cues", cues);
  
textTracksObject.setProperty(runtime, "src", textTracksValue.src);
textTracksObject.setProperty(runtime, "forced", textTracksValue.forced);
      textTracks.setValueAtIndex(runtime, textTracksIndex++, textTracksObject);
    }
    $payload.setProperty(runtime, "textTracks", textTracks);
  

    auto audioTracks = jsi::Array(runtime, $event.audioTracks.size());
    size_t audioTracksIndex = 0;
    for (auto audioTracksValue : $event.audioTracks) {
      auto audioTracksObject = jsi::Object(runtime);
      audioTracksObject.setProperty(runtime, "id", audioTracksValue.id);
audioTracksObject.setProperty(runtime, "uid", audioTracksValue.uid);
audioTracksObject.setProperty(runtime, "kind", audioTracksValue.kind);
audioTracksObject.setProperty(runtime, "label", audioTracksValue.label);
audioTracksObject.setProperty(runtime, "language", audioTracksValue.language);
{
  auto activeQuality = jsi::Object(runtime);
  activeQuality.setProperty(runtime, "averageBandwidth", audioTracksValue.activeQuality.averageBandwidth);
  activeQuality.setProperty(runtime, "bandwidth", audioTracksValue.activeQuality.bandwidth);
  activeQuality.setProperty(runtime, "codecs", audioTracksValue.activeQuality.codecs);
  activeQuality.setProperty(runtime, "id", audioTracksValue.activeQuality.id);
  activeQuality.setProperty(runtime, "uid", audioTracksValue.activeQuality.uid);
  activeQuality.setProperty(runtime, "name", audioTracksValue.activeQuality.name);
  activeQuality.setProperty(runtime, "label", audioTracksValue.activeQuality.label);
  activeQuality.setProperty(runtime, "available", audioTracksValue.activeQuality.available);
  activeQuality.setProperty(runtime, "width", audioTracksValue.activeQuality.width);
  activeQuality.setProperty(runtime, "height", audioTracksValue.activeQuality.height);
  audioTracksObject.setProperty(runtime, "activeQuality", activeQuality);
}

    auto qualities = jsi::Array(runtime, audioTracksValue.qualities.size());
    size_t qualitiesIndex = 0;
    for (auto qualitiesValue : audioTracksValue.qualities) {
      auto qualitiesObject = jsi::Object(runtime);
      qualitiesObject.setProperty(runtime, "averageBandwidth", qualitiesValue.averageBandwidth);
qualitiesObject.setProperty(runtime, "bandwidth", qualitiesValue.bandwidth);
qualitiesObject.setProperty(runtime, "codecs", qualitiesValue.codecs);
qualitiesObject.setProperty(runtime, "id", qualitiesValue.id);
qualitiesObject.setProperty(runtime, "uid", qualitiesValue.uid);
qualitiesObject.setProperty(runtime, "name", qualitiesValue.name);
qualitiesObject.setProperty(runtime, "label", qualitiesValue.label);
qualitiesObject.setProperty(runtime, "available", qualitiesValue.available);
qualitiesObject.setProperty(runtime, "width", qualitiesValue.width);
qualitiesObject.setProperty(runtime, "height", qualitiesValue.height);
      qualities.setValueAtIndex(runtime, qualitiesIndex++, qualitiesObject);
    }
    audioTracksObject.setProperty(runtime, "qualities", qualities);
  
audioTracksObject.setProperty(runtime, "enabled", audioTracksValue.enabled);
      audioTracks.setValueAtIndex(runtime, audioTracksIndex++, audioTracksObject);
    }
    $payload.setProperty(runtime, "audioTracks", audioTracks);
  

    auto videoTracks = jsi::Array(runtime, $event.videoTracks.size());
    size_t videoTracksIndex = 0;
    for (auto videoTracksValue : $event.videoTracks) {
      auto videoTracksObject = jsi::Object(runtime);
      videoTracksObject.setProperty(runtime, "id", videoTracksValue.id);
videoTracksObject.setProperty(runtime, "uid", videoTracksValue.uid);
videoTracksObject.setProperty(runtime, "kind", videoTracksValue.kind);
videoTracksObject.setProperty(runtime, "label", videoTracksValue.label);
videoTracksObject.setProperty(runtime, "language", videoTracksValue.language);
{
  auto activeQuality = jsi::Object(runtime);
  activeQuality.setProperty(runtime, "averageBandwidth", videoTracksValue.activeQuality.averageBandwidth);
  activeQuality.setProperty(runtime, "bandwidth", videoTracksValue.activeQuality.bandwidth);
  activeQuality.setProperty(runtime, "codecs", videoTracksValue.activeQuality.codecs);
  activeQuality.setProperty(runtime, "id", videoTracksValue.activeQuality.id);
  activeQuality.setProperty(runtime, "uid", videoTracksValue.activeQuality.uid);
  activeQuality.setProperty(runtime, "name", videoTracksValue.activeQuality.name);
  activeQuality.setProperty(runtime, "label", videoTracksValue.activeQuality.label);
  activeQuality.setProperty(runtime, "available", videoTracksValue.activeQuality.available);
  activeQuality.setProperty(runtime, "width", videoTracksValue.activeQuality.width);
  activeQuality.setProperty(runtime, "height", videoTracksValue.activeQuality.height);
  videoTracksObject.setProperty(runtime, "activeQuality", activeQuality);
}

    auto qualities = jsi::Array(runtime, videoTracksValue.qualities.size());
    size_t qualitiesIndex = 0;
    for (auto qualitiesValue : videoTracksValue.qualities) {
      auto qualitiesObject = jsi::Object(runtime);
      qualitiesObject.setProperty(runtime, "averageBandwidth", qualitiesValue.averageBandwidth);
qualitiesObject.setProperty(runtime, "bandwidth", qualitiesValue.bandwidth);
qualitiesObject.setProperty(runtime, "codecs", qualitiesValue.codecs);
qualitiesObject.setProperty(runtime, "id", qualitiesValue.id);
qualitiesObject.setProperty(runtime, "uid", qualitiesValue.uid);
qualitiesObject.setProperty(runtime, "name", qualitiesValue.name);
qualitiesObject.setProperty(runtime, "label", qualitiesValue.label);
qualitiesObject.setProperty(runtime, "available", qualitiesValue.available);
qualitiesObject.setProperty(runtime, "width", qualitiesValue.width);
qualitiesObject.setProperty(runtime, "height", qualitiesValue.height);
      qualities.setValueAtIndex(runtime, qualitiesIndex++, qualitiesObject);
    }
    videoTracksObject.setProperty(runtime, "qualities", qualities);
  
videoTracksObject.setProperty(runtime, "enabled", videoTracksValue.enabled);
      videoTracks.setValueAtIndex(runtime, videoTracksIndex++, videoTracksObject);
    }
    $payload.setProperty(runtime, "videoTracks", videoTracks);
  
$payload.setProperty(runtime, "duration", $event.duration);
$payload.setProperty(runtime, "selectedTextTrack", $event.selectedTextTrack);
$payload.setProperty(runtime, "selectedVideoTrack", $event.selectedVideoTrack);
$payload.setProperty(runtime, "selectedAudioTrack", $event.selectedAudioTrack);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeReadyStateChange(OnNativeReadyStateChange $event) const {
  dispatchEvent("nativeReadyStateChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "readyState", $event.readyState);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeError(OnNativeError $event) const {
  dispatchEvent("nativeError", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto error = jsi::Object(runtime);
  error.setProperty(runtime, "errorCode", $event.error.errorCode);
  error.setProperty(runtime, "errorMessage", $event.error.errorMessage);
  $payload.setProperty(runtime, "error", error);
}
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeProgress(OnNativeProgress $event) const {
  dispatchEvent("nativeProgress", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    auto seekable = jsi::Array(runtime, $event.seekable.size());
    size_t seekableIndex = 0;
    for (auto seekableValue : $event.seekable) {
      auto seekableObject = jsi::Object(runtime);
      seekableObject.setProperty(runtime, "start", seekableValue.start);
seekableObject.setProperty(runtime, "end", seekableValue.end);
      seekable.setValueAtIndex(runtime, seekableIndex++, seekableObject);
    }
    $payload.setProperty(runtime, "seekable", seekable);
  

    auto buffered = jsi::Array(runtime, $event.buffered.size());
    size_t bufferedIndex = 0;
    for (auto bufferedValue : $event.buffered) {
      auto bufferedObject = jsi::Object(runtime);
      bufferedObject.setProperty(runtime, "start", bufferedValue.start);
bufferedObject.setProperty(runtime, "end", bufferedValue.end);
      buffered.setValueAtIndex(runtime, bufferedIndex++, bufferedObject);
    }
    $payload.setProperty(runtime, "buffered", buffered);
  
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeVolumeChange(OnNativeVolumeChange $event) const {
  dispatchEvent("nativeVolumeChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "volume", $event.volume);
$payload.setProperty(runtime, "muted", $event.muted);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeCanPlay(OnNativeCanPlay $event) const {
  dispatchEvent("nativeCanPlay", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativePlay(OnNativePlay $event) const {
  dispatchEvent("nativePlay", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativePlaying(OnNativePlaying $event) const {
  dispatchEvent("nativePlaying", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativePause(OnNativePause $event) const {
  dispatchEvent("nativePause", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeSeeking(OnNativeSeeking $event) const {
  dispatchEvent("nativeSeeking", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeSeeked(OnNativeSeeked $event) const {
  dispatchEvent("nativeSeeked", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeEnded(OnNativeEnded $event) const {
  dispatchEvent("nativeEnded", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeWaiting(OnNativeWaiting $event) const {
  dispatchEvent("nativeWaiting", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeTimeUpdate(OnNativeTimeUpdate $event) const {
  dispatchEvent("nativeTimeUpdate", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "currentTime", $event.currentTime);
$payload.setProperty(runtime, "currentProgramDateTime", $event.currentProgramDateTime);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeDurationChange(OnNativeDurationChange $event) const {
  dispatchEvent("nativeDurationChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "duration", $event.duration);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeRateChange(OnNativeRateChange $event) const {
  dispatchEvent("nativeRateChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "playbackRate", $event.playbackRate);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeSegmentNotFound(OnNativeSegmentNotFound $event) const {
  dispatchEvent("nativeSegmentNotFound", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "segmentStartTime", $event.segmentStartTime);
$payload.setProperty(runtime, "error", $event.error);
$payload.setProperty(runtime, "retryCount", $event.retryCount);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeTextTrackListEvent(OnNativeTextTrackListEvent $event) const {
  dispatchEvent("nativeTextTrackListEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
{
  auto track = jsi::Object(runtime);
  track.setProperty(runtime, "kind", $event.track.kind);
  track.setProperty(runtime, "label", $event.track.label);
  track.setProperty(runtime, "language", $event.track.language);
  track.setProperty(runtime, "id", $event.track.id);
  track.setProperty(runtime, "uid", $event.track.uid);
  track.setProperty(runtime, "mode", $event.track.mode);
  track.setProperty(runtime, "type", $event.track.type);

      auto cues = jsi::Array(runtime, $event.track.cues.size());
      size_t cuesIndex = 0;
      for (auto cuesValue : $event.track.cues) {
        auto cuesObject = jsi::Object(runtime);
        cuesObject.setProperty(runtime, "id", cuesValue.id);
  cuesObject.setProperty(runtime, "uid", cuesValue.uid);
  cuesObject.setProperty(runtime, "startTime", cuesValue.startTime);
  cuesObject.setProperty(runtime, "endTime", cuesValue.endTime);
  {
    auto content = jsi::Object(runtime);
    
    cuesObject.setProperty(runtime, "content", content);
  }
  cuesObject.setProperty(runtime, "startDate", cuesValue.startDate);
  cuesObject.setProperty(runtime, "endDate", cuesValue.endDate);
  cuesObject.setProperty(runtime, "classString", cuesValue.classString);
  cuesObject.setProperty(runtime, "duration", cuesValue.duration);
  cuesObject.setProperty(runtime, "plannedDuration", cuesValue.plannedDuration);
  cuesObject.setProperty(runtime, "endOnNext", cuesValue.endOnNext);
  {
    auto customAttributes = jsi::Object(runtime);
    
    cuesObject.setProperty(runtime, "customAttributes", customAttributes);
  }
        cues.setValueAtIndex(runtime, cuesIndex++, cuesObject);
      }
      track.setProperty(runtime, "cues", cues);
    
  track.setProperty(runtime, "src", $event.track.src);
  track.setProperty(runtime, "forced", $event.track.forced);
  $payload.setProperty(runtime, "track", track);
}
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeTextTrackEvent(OnNativeTextTrackEvent $event) const {
  dispatchEvent("nativeTextTrackEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "trackUid", $event.trackUid);
{
  auto cue = jsi::Object(runtime);
  cue.setProperty(runtime, "id", $event.cue.id);
  cue.setProperty(runtime, "uid", $event.cue.uid);
  cue.setProperty(runtime, "startTime", $event.cue.startTime);
  cue.setProperty(runtime, "endTime", $event.cue.endTime);
  {
    auto content = jsi::Object(runtime);
    
    cue.setProperty(runtime, "content", content);
  }
  cue.setProperty(runtime, "startDate", $event.cue.startDate);
  cue.setProperty(runtime, "endDate", $event.cue.endDate);
  cue.setProperty(runtime, "classString", $event.cue.classString);
  cue.setProperty(runtime, "duration", $event.cue.duration);
  cue.setProperty(runtime, "plannedDuration", $event.cue.plannedDuration);
  cue.setProperty(runtime, "endOnNext", $event.cue.endOnNext);
  {
    auto customAttributes = jsi::Object(runtime);
    
    cue.setProperty(runtime, "customAttributes", customAttributes);
  }
  $payload.setProperty(runtime, "cue", cue);
}
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeMediaTrackListEvent(OnNativeMediaTrackListEvent $event) const {
  dispatchEvent("nativeMediaTrackListEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
{
  auto track = jsi::Object(runtime);
  track.setProperty(runtime, "id", $event.track.id);
  track.setProperty(runtime, "uid", $event.track.uid);
  track.setProperty(runtime, "kind", $event.track.kind);
  track.setProperty(runtime, "label", $event.track.label);
  track.setProperty(runtime, "language", $event.track.language);
  {
    auto activeQuality = jsi::Object(runtime);
    activeQuality.setProperty(runtime, "averageBandwidth", $event.track.activeQuality.averageBandwidth);
    activeQuality.setProperty(runtime, "bandwidth", $event.track.activeQuality.bandwidth);
    activeQuality.setProperty(runtime, "codecs", $event.track.activeQuality.codecs);
    activeQuality.setProperty(runtime, "id", $event.track.activeQuality.id);
    activeQuality.setProperty(runtime, "uid", $event.track.activeQuality.uid);
    activeQuality.setProperty(runtime, "name", $event.track.activeQuality.name);
    activeQuality.setProperty(runtime, "label", $event.track.activeQuality.label);
    activeQuality.setProperty(runtime, "available", $event.track.activeQuality.available);
    activeQuality.setProperty(runtime, "width", $event.track.activeQuality.width);
    activeQuality.setProperty(runtime, "height", $event.track.activeQuality.height);
    track.setProperty(runtime, "activeQuality", activeQuality);
  }

      auto qualities = jsi::Array(runtime, $event.track.qualities.size());
      size_t qualitiesIndex = 0;
      for (auto qualitiesValue : $event.track.qualities) {
        auto qualitiesObject = jsi::Object(runtime);
        qualitiesObject.setProperty(runtime, "averageBandwidth", qualitiesValue.averageBandwidth);
  qualitiesObject.setProperty(runtime, "bandwidth", qualitiesValue.bandwidth);
  qualitiesObject.setProperty(runtime, "codecs", qualitiesValue.codecs);
  qualitiesObject.setProperty(runtime, "id", qualitiesValue.id);
  qualitiesObject.setProperty(runtime, "uid", qualitiesValue.uid);
  qualitiesObject.setProperty(runtime, "name", qualitiesValue.name);
  qualitiesObject.setProperty(runtime, "label", qualitiesValue.label);
  qualitiesObject.setProperty(runtime, "available", qualitiesValue.available);
  qualitiesObject.setProperty(runtime, "width", qualitiesValue.width);
  qualitiesObject.setProperty(runtime, "height", qualitiesValue.height);
        qualities.setValueAtIndex(runtime, qualitiesIndex++, qualitiesObject);
      }
      track.setProperty(runtime, "qualities", qualities);
    
  track.setProperty(runtime, "enabled", $event.track.enabled);
  $payload.setProperty(runtime, "track", track);
}
$payload.setProperty(runtime, "trackType", $event.trackType);
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeMediaTrackEvent(OnNativeMediaTrackEvent $event) const {
  dispatchEvent("nativeMediaTrackEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "trackType", $event.trackType);
$payload.setProperty(runtime, "trackUid", $event.trackUid);

    auto qualities = jsi::Array(runtime, $event.qualities.size());
    size_t qualitiesIndex = 0;
    for (auto qualitiesValue : $event.qualities) {
      auto qualitiesObject = jsi::Object(runtime);
      qualitiesObject.setProperty(runtime, "averageBandwidth", qualitiesValue.averageBandwidth);
qualitiesObject.setProperty(runtime, "bandwidth", qualitiesValue.bandwidth);
qualitiesObject.setProperty(runtime, "codecs", qualitiesValue.codecs);
qualitiesObject.setProperty(runtime, "id", qualitiesValue.id);
qualitiesObject.setProperty(runtime, "uid", qualitiesValue.uid);
qualitiesObject.setProperty(runtime, "name", qualitiesValue.name);
qualitiesObject.setProperty(runtime, "label", qualitiesValue.label);
qualitiesObject.setProperty(runtime, "available", qualitiesValue.available);
qualitiesObject.setProperty(runtime, "width", qualitiesValue.width);
qualitiesObject.setProperty(runtime, "height", qualitiesValue.height);
      qualities.setValueAtIndex(runtime, qualitiesIndex++, qualitiesObject);
    }
    $payload.setProperty(runtime, "qualities", qualities);
  
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeAdEvent(OnNativeAdEvent $event) const {
  dispatchEvent("nativeAdEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
{
  auto ad = jsi::Object(runtime);
  ad.setProperty(runtime, "adSystem", $event.ad.adSystem);
  ad.setProperty(runtime, "integration", $event.ad.integration);
  ad.setProperty(runtime, "type", $event.ad.type);
  ad.setProperty(runtime, "id", $event.ad.id);
  ad.setProperty(runtime, "readyState", $event.ad.readyState);
  {
    auto adBreak = jsi::Object(runtime);
    adBreak.setProperty(runtime, "integration", $event.ad.adBreak.integration);
    adBreak.setProperty(runtime, "timeOffset", $event.ad.adBreak.timeOffset);
    adBreak.setProperty(runtime, "maxDuration", $event.ad.adBreak.maxDuration);
    adBreak.setProperty(runtime, "maxRemainingDuration", $event.ad.adBreak.maxRemainingDuration);
    ad.setProperty(runtime, "adBreak", adBreak);
  }
  ad.setProperty(runtime, "duration", $event.ad.duration);
  ad.setProperty(runtime, "width", $event.ad.width);
  ad.setProperty(runtime, "height", $event.ad.height);
  ad.setProperty(runtime, "resourceURI", $event.ad.resourceURI);
  ad.setProperty(runtime, "clickThrough", $event.ad.clickThrough);
  {
    auto companions = jsi::Object(runtime);
    companions.setProperty(runtime, "adSlotId", $event.ad.companions.adSlotId);
    companions.setProperty(runtime, "altText", $event.ad.companions.altText);
    companions.setProperty(runtime, "contentHTML", $event.ad.companions.contentHTML);
    companions.setProperty(runtime, "clickThrough", $event.ad.companions.clickThrough);
    companions.setProperty(runtime, "width", $event.ad.companions.width);
    companions.setProperty(runtime, "height", $event.ad.companions.height);
    companions.setProperty(runtime, "resourceURI", $event.ad.companions.resourceURI);
    ad.setProperty(runtime, "companions", companions);
  }
  ad.setProperty(runtime, "skipOffset", $event.ad.skipOffset);
  ad.setProperty(runtime, "creativeId", $event.ad.creativeId);

      auto universalAdIds = jsi::Array(runtime, $event.ad.universalAdIds.size());
      size_t universalAdIdsIndex = 0;
      for (auto universalAdIdsValue : $event.ad.universalAdIds) {
        auto universalAdIdsObject = jsi::Object(runtime);
        universalAdIdsObject.setProperty(runtime, "adIdRegistry", universalAdIdsValue.adIdRegistry);
  universalAdIdsObject.setProperty(runtime, "adIdValue", universalAdIdsValue.adIdValue);
        universalAdIds.setValueAtIndex(runtime, universalAdIdsIndex++, universalAdIdsObject);
      }
      ad.setProperty(runtime, "universalAdIds", universalAdIds);
    

      auto ads = jsi::Array(runtime, $event.ad.ads.size());
      size_t adsIndex = 0;
      for (auto adsValue : $event.ad.ads) {
        auto adsObject = jsi::Object(runtime);
        adsObject.setProperty(runtime, "adSystem", adsValue.adSystem);
  adsObject.setProperty(runtime, "integration", adsValue.integration);
  adsObject.setProperty(runtime, "type", adsValue.type);
  adsObject.setProperty(runtime, "id", adsValue.id);
  adsObject.setProperty(runtime, "readyState", adsValue.readyState);
  adsObject.setProperty(runtime, "duration", adsValue.duration);
  adsObject.setProperty(runtime, "width", adsValue.width);
  adsObject.setProperty(runtime, "height", adsValue.height);
  adsObject.setProperty(runtime, "resourceURI", adsValue.resourceURI);
  adsObject.setProperty(runtime, "clickThrough", adsValue.clickThrough);
  {
    auto companions = jsi::Object(runtime);
    companions.setProperty(runtime, "adSlotId", adsValue.companions.adSlotId);
    companions.setProperty(runtime, "altText", adsValue.companions.altText);
    companions.setProperty(runtime, "contentHTML", adsValue.companions.contentHTML);
    companions.setProperty(runtime, "clickThrough", adsValue.companions.clickThrough);
    companions.setProperty(runtime, "width", adsValue.companions.width);
    companions.setProperty(runtime, "height", adsValue.companions.height);
    companions.setProperty(runtime, "resourceURI", adsValue.companions.resourceURI);
    adsObject.setProperty(runtime, "companions", companions);
  }
  adsObject.setProperty(runtime, "skipOffset", adsValue.skipOffset);
  adsObject.setProperty(runtime, "creativeId", adsValue.creativeId);

      auto universalAdIds = jsi::Array(runtime, adsValue.universalAdIds.size());
      size_t universalAdIdsIndex = 0;
      for (auto universalAdIdsValue : adsValue.universalAdIds) {
        auto universalAdIdsObject = jsi::Object(runtime);
        universalAdIdsObject.setProperty(runtime, "adIdRegistry", universalAdIdsValue.adIdRegistry);
  universalAdIdsObject.setProperty(runtime, "adIdValue", universalAdIdsValue.adIdValue);
        universalAdIds.setValueAtIndex(runtime, universalAdIdsIndex++, universalAdIdsObject);
      }
      adsObject.setProperty(runtime, "universalAdIds", universalAdIds);
    
        ads.setValueAtIndex(runtime, adsIndex++, adsObject);
      }
      ad.setProperty(runtime, "ads", ads);
    
  ad.setProperty(runtime, "timeOffset", $event.ad.timeOffset);
  ad.setProperty(runtime, "maxDuration", $event.ad.maxDuration);
  ad.setProperty(runtime, "maxRemainingDuration", $event.ad.maxRemainingDuration);
  $payload.setProperty(runtime, "ad", ad);
}
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeCastEvent(OnNativeCastEvent $event) const {
  dispatchEvent("nativeCastEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "state", $event.state);
{
  auto error = jsi::Object(runtime);
  error.setProperty(runtime, "errorCode", $event.error.errorCode);
  error.setProperty(runtime, "description", $event.error.description);
  $payload.setProperty(runtime, "error", error);
}
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativePresentationModeChange(OnNativePresentationModeChange $event) const {
  dispatchEvent("nativePresentationModeChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "presentationMode", $event.presentationMode);
$payload.setProperty(runtime, "previousPresentationMode", $event.previousPresentationMode);
{
  auto context = jsi::Object(runtime);
  context.setProperty(runtime, "pip", $event.context.pip);
  $payload.setProperty(runtime, "context", context);
}
    return $payload;
  });
}


void THEOplayerRCTViewEventEmitter::onNativeResize(OnNativeResize $event) const {
  dispatchEvent("nativeResize", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "width", $event.width);
$payload.setProperty(runtime, "height", $event.height);
    return $payload;
  });
}

} // namespace facebook::react
