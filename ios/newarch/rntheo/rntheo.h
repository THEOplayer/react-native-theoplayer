/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of rntheo symbols
#ifndef rntheo_H
#define rntheo_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeAdsModule {
    struct SpecScheduleAdSources {
      NSString *src() const;
      NSString *type() const;

      SpecScheduleAdSources(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeAdsModule_SpecScheduleAdSources)
+ (RCTManagedPointer *)JS_NativeAdsModule_SpecScheduleAdSources:(id)json;
@end
namespace JS {
  namespace NativeAdsModule {
    struct SpecScheduleAd {
      NSString *integration() const;
      std::optional<JS::NativeAdsModule::SpecScheduleAdSources> sources() const;
      std::optional<double> timeOffset() const;

      SpecScheduleAd(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeAdsModule_SpecScheduleAd)
+ (RCTManagedPointer *)JS_NativeAdsModule_SpecScheduleAd:(id)json;
@end
namespace JS {
  namespace NativeAdsModule {
    struct SpecAddFriendlyObstructionObstruction {
      double view() const;
      NSString *purpose() const;
      NSString *reason() const;

      SpecAddFriendlyObstructionObstruction(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeAdsModule_SpecAddFriendlyObstructionObstruction)
+ (RCTManagedPointer *)JS_NativeAdsModule_SpecAddFriendlyObstructionObstruction:(id)json;
@end
@protocol NativeAdsModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)playing:(NSInteger)tag
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)skip:(NSInteger)tag;
- (void)currentAdBreak:(NSInteger)tag
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)currentAds:(NSInteger)tag
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)scheduledAdBreaks:(NSInteger)tag
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)schedule:(NSInteger)tag
              ad:(JS::NativeAdsModule::SpecScheduleAd &)ad;
- (void)daiContentTimeForStreamTime:(NSInteger)tag
                               time:(double)time
                            resolve:(RCTPromiseResolveBlock)resolve
                             reject:(RCTPromiseRejectBlock)reject;
- (void)daiStreamTimeForContentTime:(NSInteger)tag
                               time:(double)time
                            resolve:(RCTPromiseResolveBlock)resolve
                             reject:(RCTPromiseRejectBlock)reject;
- (void)daiSnapback:(NSInteger)tag
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)daiSetSnapback:(NSInteger)tag
               enabled:(BOOL)enabled;
- (void)addFriendlyObstruction:(NSInteger)tag
                   obstruction:(JS::NativeAdsModule::SpecAddFriendlyObstructionObstruction &)obstruction;
- (void)removeAllFriendlyObstructions:(NSInteger)tag;

@end

@interface NativeAdsModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeAdsModule'
   */
  class JSI_EXPORT NativeAdsModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeAdsModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeCacheModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)createTask:(NSDictionary *)source
        parameters:(NSDictionary *)parameters;
- (void)getInitialState:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)renewLicense:(NSString *)taskId
           drmConfig:(NSDictionary *)drmConfig;
- (void)pauseCachingTask:(NSString *)taskId;
- (void)removeCachingTask:(NSString *)taskId;
- (void)startCachingTask:(NSString *)taskId;

@end

@interface NativeCacheModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCacheModule'
   */
  class JSI_EXPORT NativeCacheModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeCacheModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeCastModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)casting:(double)tag
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)chromecastCasting:(double)tag
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)airplayCasting:(double)tag
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)chromecastState:(double)tag
                resolve:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)airplayState:(double)tag
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)chromecastStart:(double)tag;
- (void)chromecastStop:(double)tag;
- (void)chromecastJoin:(double)tag;
- (void)chromecastLeave:(double)tag;
- (void)airplayStart:(double)tag;
- (void)airplayStop:(double)tag;

@end

@interface NativeCastModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCastModule'
   */
  class JSI_EXPORT NativeCastModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeCastModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeContentProtectionModule {
    struct SpecOnBuildProcessedPayload {
      NSString *requestId() const;
      NSString *resultString() const;

      SpecOnBuildProcessedPayload(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeContentProtectionModule_SpecOnBuildProcessedPayload)
+ (RCTManagedPointer *)JS_NativeContentProtectionModule_SpecOnBuildProcessedPayload:(id)json;
@end
@protocol NativeContentProtectionModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)registerContentProtectionIntegration:(NSString *)integrationId
                                 keySystemId:(NSString *)keySystemId;
- (void)onBuildProcessed:(JS::NativeContentProtectionModule::SpecOnBuildProcessedPayload &)payload;
- (void)onCertificateRequest:(NSDictionary *)payload;
- (void)onCertificateRequestProcessedAsCertificate:(NSDictionary *)payload;
- (void)onCertificateRequestProcessedAsRequest:(NSDictionary *)payload;
- (void)onCertificateResponseProcessed:(NSDictionary *)payload;
- (void)onLicenseRequestProcessedAsLicense:(NSDictionary *)payload;
- (void)onLicenseRequestProcessedAsRequest:(NSDictionary *)payload;
- (void)onLicenseResponseProcessed:(NSDictionary *)payload;
- (void)onExtractFairplayContentIdProcessed:(NSDictionary *)payload;

@end

@interface NativeContentProtectionModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeContentProtectionModule'
   */
  class JSI_EXPORT NativeContentProtectionModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeContentProtectionModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativeEventBroadcastModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)broadcastEvent:(NSInteger)tag
                 event:(NSDictionary *)event;

@end

@interface NativeEventBroadcastModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeEventBroadcastModule'
   */
  class JSI_EXPORT NativeEventBroadcastModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeEventBroadcastModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativePlaybackSettingsModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)useFastStartup:(BOOL)useFastStartup;
- (void)setLipSyncCorrection:(double)correctionMs;

@end

@interface NativePlaybackSettingsModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativePlaybackSettingsModule'
   */
  class JSI_EXPORT NativePlaybackSettingsModuleSpecJSI : public ObjCTurboModule {
  public:
    NativePlaybackSettingsModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

@protocol NativePlayerModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)version:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)setPreload:(NSInteger)tag
              type:(NSString *)type;
- (void)setCurrentTime:(NSInteger)tag
              seekTime:(double)seekTime;
- (void)setPipConfig:(NSInteger)tag
              config:(NSDictionary *)config;
- (void)setBackgroundAudioConfig:(NSInteger)tag
                          config:(NSDictionary *)config;
- (void)setPresentationMode:(NSInteger)tag
                       mode:(NSString *)mode;
- (void)setMuted:(NSInteger)tag
           muted:(BOOL)muted;
- (void)setPlaybackRate:(NSInteger)tag
                   rate:(double)rate;
- (void)setSelectedAudioTrack:(NSInteger)tag
                     trackUid:(NSNumber *)trackUid;
- (void)setSelectedVideoTrack:(NSInteger)tag
                     trackUid:(NSNumber *)trackUid;
- (void)setSelectedTextTrack:(NSInteger)tag
                    trackUid:(NSNumber *)trackUid;
- (void)setSource:(NSInteger)tag
           source:(NSDictionary *)source;
- (void)setTargetVideoQuality:(NSInteger)tag
                    qualities:(NSArray *)qualities;
- (void)setVolume:(NSInteger)tag
           volume:(double)volume;
- (void)setAspectRatio:(NSInteger)tag
                 ratio:(NSString *)ratio;
- (void)setRenderingTarget:(NSInteger)tag
                    target:(NSString *)target;
- (void)setKeepScreenOn:(NSInteger)tag
           keepScreenOn:(BOOL)keepScreenOn;
- (void)setPaused:(double)tag
           paused:(BOOL)paused;
- (void)setTextTrackStyle:(NSInteger)tag
                    style:(NSDictionary *)style;
- (void)setABRConfig:(NSInteger)tag
              config:(NSDictionary *)config;

@end

@interface NativePlayerModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativePlayerModule'
   */
  class JSI_EXPORT NativePlayerModuleSpecJSI : public ObjCTurboModule {
  public:
    NativePlayerModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeAdsModule::SpecScheduleAdSources::src() const
{
  id const p = _v[@"src"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeAdsModule::SpecScheduleAdSources::type() const
{
  id const p = _v[@"type"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeAdsModule::SpecScheduleAd::integration() const
{
  id const p = _v[@"integration"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<JS::NativeAdsModule::SpecScheduleAdSources> JS::NativeAdsModule::SpecScheduleAd::sources() const
{
  id const p = _v[@"sources"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeAdsModule::SpecScheduleAdSources(p)));
}
inline std::optional<double> JS::NativeAdsModule::SpecScheduleAd::timeOffset() const
{
  id const p = _v[@"timeOffset"];
  return RCTBridgingToOptionalDouble(p);
}
inline double JS::NativeAdsModule::SpecAddFriendlyObstructionObstruction::view() const
{
  id const p = _v[@"view"];
  return RCTBridgingToDouble(p);
}
inline NSString *JS::NativeAdsModule::SpecAddFriendlyObstructionObstruction::purpose() const
{
  id const p = _v[@"purpose"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeAdsModule::SpecAddFriendlyObstructionObstruction::reason() const
{
  id const p = _v[@"reason"];
  return RCTBridgingToOptionalString(p);
}


inline NSString *JS::NativeContentProtectionModule::SpecOnBuildProcessedPayload::requestId() const
{
  id const p = _v[@"requestId"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeContentProtectionModule::SpecOnBuildProcessedPayload::resultString() const
{
  id const p = _v[@"resultString"];
  return RCTBridgingToString(p);
}



#endif // rntheo_H
