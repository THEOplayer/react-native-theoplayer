
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterH.js
 */
#pragma once

#include <react/renderer/components/view/ViewEventEmitter.h>


namespace facebook::react {
class THEOplayerRCTViewEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnNativePlayerReadyVersion {
      std::string version;
    std::string playerSuiteVersion;
    };

  struct OnNativePlayerReadyState {
      
    };

  struct OnNativePlayerReady {
      OnNativePlayerReadyVersion version;
    OnNativePlayerReadyState state;
    };

  struct OnNativeSourceChange {
      
    };

  struct OnNativeLoadStart {
      
    };

  struct OnNativeLoadedData {
      
    };

  struct OnNativeLoadedMetadataTextTracksCuesContent {
      
    };

  struct OnNativeLoadedMetadataTextTracksCuesCustomAttributes {
      
    };

  struct OnNativeLoadedMetadataTextTracksCues {
      std::string id;
    int uid;
    double startTime;
    double endTime;
    OnNativeLoadedMetadataTextTracksCuesContent content;
    double startDate;
    double endDate;
    std::string classString;
    double duration;
    double plannedDuration;
    bool endOnNext;
    OnNativeLoadedMetadataTextTracksCuesCustomAttributes customAttributes;
    };

  struct OnNativeLoadedMetadataTextTracks {
      std::string kind;
    std::string label;
    std::string language;
    std::string id;
    int uid;
    std::string mode;
    std::string type;
    std::vector<OnNativeLoadedMetadataTextTracksCues> cues;
    std::string src;
    bool forced;
    };

  struct OnNativeLoadedMetadataAudioTracksActiveQuality {
      double averageBandwidth;
    double bandwidth;
    std::string codecs;
    std::string id;
    int uid;
    std::string name;
    std::string label;
    bool available;
    double width;
    double height;
    };

  struct OnNativeLoadedMetadataAudioTracksQualities {
      double averageBandwidth;
    double bandwidth;
    std::string codecs;
    std::string id;
    int uid;
    std::string name;
    std::string label;
    bool available;
    double width;
    double height;
    };

  struct OnNativeLoadedMetadataAudioTracks {
      std::string id;
    int uid;
    std::string kind;
    std::string label;
    std::string language;
    OnNativeLoadedMetadataAudioTracksActiveQuality activeQuality;
    std::vector<OnNativeLoadedMetadataAudioTracksQualities> qualities;
    bool enabled;
    };

  struct OnNativeLoadedMetadataVideoTracksActiveQuality {
      double averageBandwidth;
    double bandwidth;
    std::string codecs;
    std::string id;
    int uid;
    std::string name;
    std::string label;
    bool available;
    double width;
    double height;
    };

  struct OnNativeLoadedMetadataVideoTracksQualities {
      double averageBandwidth;
    double bandwidth;
    std::string codecs;
    std::string id;
    double uid;
    std::string name;
    std::string label;
    bool available;
    double width;
    double height;
    };

  struct OnNativeLoadedMetadataVideoTracks {
      std::string id;
    double uid;
    std::string kind;
    std::string label;
    std::string language;
    OnNativeLoadedMetadataVideoTracksActiveQuality activeQuality;
    std::vector<OnNativeLoadedMetadataVideoTracksQualities> qualities;
    bool enabled;
    };

  struct OnNativeLoadedMetadata {
      std::vector<OnNativeLoadedMetadataTextTracks> textTracks;
    std::vector<OnNativeLoadedMetadataAudioTracks> audioTracks;
    std::vector<OnNativeLoadedMetadataVideoTracks> videoTracks;
    double duration;
    int selectedTextTrack;
    int selectedVideoTrack;
    int selectedAudioTrack;
    };

  struct OnNativeReadyStateChange {
      int readyState;
    };

  struct OnNativeErrorError {
      std::string errorCode;
    std::string errorMessage;
    };

  struct OnNativeError {
      OnNativeErrorError error;
    };

  struct OnNativeProgressSeekable {
      double start;
    double end;
    };

  struct OnNativeProgressBuffered {
      double start;
    double end;
    };

  struct OnNativeProgress {
      std::vector<OnNativeProgressSeekable> seekable;
    std::vector<OnNativeProgressBuffered> buffered;
    };

  struct OnNativeVolumeChange {
      double volume;
    bool muted;
    };

  struct OnNativeCanPlay {
      
    };

  struct OnNativePlay {
      
    };

  struct OnNativePlaying {
      
    };

  struct OnNativePause {
      
    };

  struct OnNativeSeeking {
      
    };

  struct OnNativeSeeked {
      
    };

  struct OnNativeEnded {
      
    };

  struct OnNativeWaiting {
      
    };

  struct OnNativeTimeUpdate {
      double currentTime;
    double currentProgramDateTime;
    };

  struct OnNativeDurationChange {
      double duration;
    };

  struct OnNativeRateChange {
      double playbackRate;
    };

  struct OnNativeSegmentNotFound {
      double segmentStartTime;
    std::string error;
    int retryCount;
    };

  struct OnNativeTextTrackListEventTrackCuesContent {
      
    };

  struct OnNativeTextTrackListEventTrackCuesCustomAttributes {
      
    };

  struct OnNativeTextTrackListEventTrackCues {
      std::string id;
    int uid;
    double startTime;
    double endTime;
    OnNativeTextTrackListEventTrackCuesContent content;
    double startDate;
    double endDate;
    std::string classString;
    double duration;
    double plannedDuration;
    bool endOnNext;
    OnNativeTextTrackListEventTrackCuesCustomAttributes customAttributes;
    };

  struct OnNativeTextTrackListEventTrack {
      std::string kind;
    std::string label;
    std::string language;
    std::string id;
    int uid;
    std::string mode;
    std::string type;
    std::vector<OnNativeTextTrackListEventTrackCues> cues;
    std::string src;
    bool forced;
    };

  struct OnNativeTextTrackListEvent {
      int type;
    OnNativeTextTrackListEventTrack track;
    };

  struct OnNativeTextTrackEventCueContent {
      
    };

  struct OnNativeTextTrackEventCueCustomAttributes {
      
    };

  struct OnNativeTextTrackEventCue {
      std::string id;
    int uid;
    double startTime;
    double endTime;
    OnNativeTextTrackEventCueContent content;
    double startDate;
    double endDate;
    std::string classString;
    double duration;
    double plannedDuration;
    bool endOnNext;
    OnNativeTextTrackEventCueCustomAttributes customAttributes;
    };

  struct OnNativeTextTrackEvent {
      int type;
    int trackUid;
    OnNativeTextTrackEventCue cue;
    };

  struct OnNativeMediaTrackListEventTrackActiveQuality {
      double averageBandwidth;
    double bandwidth;
    std::string codecs;
    std::string id;
    int uid;
    std::string name;
    std::string label;
    bool available;
    double width;
    double height;
    };

  struct OnNativeMediaTrackListEventTrackQualities {
      double averageBandwidth;
    double bandwidth;
    std::string codecs;
    std::string id;
    double uid;
    std::string name;
    std::string label;
    bool available;
    double width;
    double height;
    };

  struct OnNativeMediaTrackListEventTrack {
      std::string id;
    int uid;
    std::string kind;
    std::string label;
    std::string language;
    OnNativeMediaTrackListEventTrackActiveQuality activeQuality;
    std::vector<OnNativeMediaTrackListEventTrackQualities> qualities;
    bool enabled;
    };

  struct OnNativeMediaTrackListEvent {
      int type;
    OnNativeMediaTrackListEventTrack track;
    int trackType;
    };

  struct OnNativeMediaTrackEventQualities {
      double averageBandwidth;
    double bandwidth;
    std::string codecs;
    std::string id;
    int uid;
    std::string name;
    std::string label;
    bool available;
    double width;
    double height;
    };

  struct OnNativeMediaTrackEvent {
      int type;
    int trackType;
    int trackUid;
    std::vector<OnNativeMediaTrackEventQualities> qualities;
    };

  struct OnNativeAdEventAdAdBreak {
      std::string integration;
    double timeOffset;
    double maxDuration;
    double maxRemainingDuration;
    };

  struct OnNativeAdEventAdCompanions {
      std::string adSlotId;
    std::string altText;
    std::string contentHTML;
    std::string clickThrough;
    double width;
    double height;
    std::string resourceURI;
    };

  struct OnNativeAdEventAdUniversalAdIds {
      std::string adIdRegistry;
    std::string adIdValue;
    };

  struct OnNativeAdEventAdAdsCompanions {
      std::string adSlotId;
    std::string altText;
    std::string contentHTML;
    std::string clickThrough;
    double width;
    double height;
    std::string resourceURI;
    };

  struct OnNativeAdEventAdAdsUniversalAdIds {
      std::string adIdRegistry;
    std::string adIdValue;
    };

  struct OnNativeAdEventAdAds {
      std::string adSystem;
    std::string integration;
    std::string type;
    std::string id;
    std::string readyState;
    double duration;
    double width;
    double height;
    std::string resourceURI;
    std::string clickThrough;
    OnNativeAdEventAdAdsCompanions companions;
    double skipOffset;
    std::string creativeId;
    std::vector<OnNativeAdEventAdAdsUniversalAdIds> universalAdIds;
    };

  struct OnNativeAdEventAd {
      std::string adSystem;
    std::string integration;
    std::string type;
    std::string id;
    std::string readyState;
    OnNativeAdEventAdAdBreak adBreak;
    double duration;
    double width;
    double height;
    std::string resourceURI;
    std::string clickThrough;
    OnNativeAdEventAdCompanions companions;
    double skipOffset;
    std::string creativeId;
    std::vector<OnNativeAdEventAdUniversalAdIds> universalAdIds;
    std::vector<OnNativeAdEventAdAds> ads;
    double timeOffset;
    double maxDuration;
    double maxRemainingDuration;
    };

  struct OnNativeAdEvent {
      std::string type;
    OnNativeAdEventAd ad;
    };

  struct OnNativeCastEventError {
      std::string errorCode;
    std::string description;
    };

  struct OnNativeCastEvent {
      std::string type;
    std::string state;
    OnNativeCastEventError error;
    };

  struct OnNativePresentationModeChangeContext {
      std::string pip;
    };

  struct OnNativePresentationModeChange {
      std::string presentationMode;
    std::string previousPresentationMode;
    OnNativePresentationModeChangeContext context;
    };

  struct OnNativeResize {
      double width;
    double height;
    };
  void onNativePlayerReady(OnNativePlayerReady value) const;

  void onNativeSourceChange(OnNativeSourceChange value) const;

  void onNativeLoadStart(OnNativeLoadStart value) const;

  void onNativeLoadedData(OnNativeLoadedData value) const;

  void onNativeLoadedMetadata(OnNativeLoadedMetadata value) const;

  void onNativeReadyStateChange(OnNativeReadyStateChange value) const;

  void onNativeError(OnNativeError value) const;

  void onNativeProgress(OnNativeProgress value) const;

  void onNativeVolumeChange(OnNativeVolumeChange value) const;

  void onNativeCanPlay(OnNativeCanPlay value) const;

  void onNativePlay(OnNativePlay value) const;

  void onNativePlaying(OnNativePlaying value) const;

  void onNativePause(OnNativePause value) const;

  void onNativeSeeking(OnNativeSeeking value) const;

  void onNativeSeeked(OnNativeSeeked value) const;

  void onNativeEnded(OnNativeEnded value) const;

  void onNativeWaiting(OnNativeWaiting value) const;

  void onNativeTimeUpdate(OnNativeTimeUpdate value) const;

  void onNativeDurationChange(OnNativeDurationChange value) const;

  void onNativeRateChange(OnNativeRateChange value) const;

  void onNativeSegmentNotFound(OnNativeSegmentNotFound value) const;

  void onNativeTextTrackListEvent(OnNativeTextTrackListEvent value) const;

  void onNativeTextTrackEvent(OnNativeTextTrackEvent value) const;

  void onNativeMediaTrackListEvent(OnNativeMediaTrackListEvent value) const;

  void onNativeMediaTrackEvent(OnNativeMediaTrackEvent value) const;

  void onNativeAdEvent(OnNativeAdEvent value) const;

  void onNativeCastEvent(OnNativeCastEvent value) const;

  void onNativePresentationModeChange(OnNativePresentationModeChange value) const;

  void onNativeResize(OnNativeResize value) const;
};
} // namespace facebook::react
