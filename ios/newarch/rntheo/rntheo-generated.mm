/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "rntheo.h"


@implementation NativeAdsModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeAdsModule_ScheduledAdSources)
+ (RCTManagedPointer *)JS_NativeAdsModule_ScheduledAdSources:(id)json
{
  return facebook::react::managedPointer<JS::NativeAdsModule::ScheduledAdSources>(json);
}
@end
@implementation RCTCxxConvert (NativeAdsModule_ScheduledAd)
+ (RCTManagedPointer *)JS_NativeAdsModule_ScheduledAd:(id)json
{
  return facebook::react::managedPointer<JS::NativeAdsModule::ScheduledAd>(json);
}
@end
@implementation RCTCxxConvert (NativeAdsModule_FriendlyObstruction)
+ (RCTManagedPointer *)JS_NativeAdsModule_FriendlyObstruction:(id)json
{
  return facebook::react::managedPointer<JS::NativeAdsModule::FriendlyObstruction>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_playing(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "playing", @selector(playing:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_skip(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "skip", @selector(skip:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_currentAdBreak(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "currentAdBreak", @selector(currentAdBreak:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_currentAds(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "currentAds", @selector(currentAds:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_scheduledAdBreaks(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "scheduledAdBreaks", @selector(scheduledAdBreaks:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_schedule(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "schedule", @selector(schedule:ad:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiContentTimeForStreamTime(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "daiContentTimeForStreamTime", @selector(daiContentTimeForStreamTime:time:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiStreamTimeForContentTime(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "daiStreamTimeForContentTime", @selector(daiStreamTimeForContentTime:time:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiSnapback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "daiSnapback", @selector(daiSnapback:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_daiSetSnapback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "daiSetSnapback", @selector(daiSetSnapback:enabled:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_addFriendlyObstruction(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addFriendlyObstruction", @selector(addFriendlyObstruction:obstruction:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAdsModuleSpecJSI_removeAllFriendlyObstructions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeAllFriendlyObstructions", @selector(removeAllFriendlyObstructions:), args, count);
    }

  NativeAdsModuleSpecJSI::NativeAdsModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["playing"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_playing};
        
        
        methodMap_["skip"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_skip};
        
        
        methodMap_["currentAdBreak"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_currentAdBreak};
        
        
        methodMap_["currentAds"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_currentAds};
        
        
        methodMap_["scheduledAdBreaks"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_scheduledAdBreaks};
        
        
        methodMap_["schedule"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_schedule};
        setMethodArgConversionSelector(@"schedule", 1, @"JS_NativeAdsModule_ScheduledAd:");
        
        methodMap_["daiContentTimeForStreamTime"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_daiContentTimeForStreamTime};
        
        
        methodMap_["daiStreamTimeForContentTime"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_daiStreamTimeForContentTime};
        
        
        methodMap_["daiSnapback"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_daiSnapback};
        
        
        methodMap_["daiSetSnapback"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_daiSetSnapback};
        
        
        methodMap_["addFriendlyObstruction"] = MethodMetadata {2, __hostFunction_NativeAdsModuleSpecJSI_addFriendlyObstruction};
        setMethodArgConversionSelector(@"addFriendlyObstruction", 1, @"JS_NativeAdsModule_FriendlyObstruction:");
        
        methodMap_["removeAllFriendlyObstructions"] = MethodMetadata {1, __hostFunction_NativeAdsModuleSpecJSI_removeAllFriendlyObstructions};
        
  }
} // namespace facebook::react

@implementation NativeCacheModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_createTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "createTask", @selector(createTask:parameters:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_getInitialState(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getInitialState", @selector(getInitialState:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_renewLicense(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "renewLicense", @selector(renewLicense:drmConfig:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_pauseCachingTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "pauseCachingTask", @selector(pauseCachingTask:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_removeCachingTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeCachingTask", @selector(removeCachingTask:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCacheModuleSpecJSI_startCachingTask(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "startCachingTask", @selector(startCachingTask:), args, count);
    }

  NativeCacheModuleSpecJSI::NativeCacheModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["createTask"] = MethodMetadata {2, __hostFunction_NativeCacheModuleSpecJSI_createTask};
        
        
        methodMap_["getInitialState"] = MethodMetadata {0, __hostFunction_NativeCacheModuleSpecJSI_getInitialState};
        
        
        methodMap_["renewLicense"] = MethodMetadata {2, __hostFunction_NativeCacheModuleSpecJSI_renewLicense};
        
        
        methodMap_["pauseCachingTask"] = MethodMetadata {1, __hostFunction_NativeCacheModuleSpecJSI_pauseCachingTask};
        
        
        methodMap_["removeCachingTask"] = MethodMetadata {1, __hostFunction_NativeCacheModuleSpecJSI_removeCachingTask};
        
        
        methodMap_["startCachingTask"] = MethodMetadata {1, __hostFunction_NativeCacheModuleSpecJSI_startCachingTask};
        
  }
} // namespace facebook::react

@implementation NativeCastModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_casting(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "casting", @selector(casting:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastCasting(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "chromecastCasting", @selector(chromecastCasting:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayCasting(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "airplayCasting", @selector(airplayCasting:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastState(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "chromecastState", @selector(chromecastState:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayState(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "airplayState", @selector(airplayState:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastStart(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "chromecastStart", @selector(chromecastStart:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastStop(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "chromecastStop", @selector(chromecastStop:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastJoin(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "chromecastJoin", @selector(chromecastJoin:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_chromecastLeave(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "chromecastLeave", @selector(chromecastLeave:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayStart(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "airplayStart", @selector(airplayStart:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCastModuleSpecJSI_airplayStop(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "airplayStop", @selector(airplayStop:), args, count);
    }

  NativeCastModuleSpecJSI::NativeCastModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["casting"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_casting};
        
        
        methodMap_["chromecastCasting"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastCasting};
        
        
        methodMap_["airplayCasting"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayCasting};
        
        
        methodMap_["chromecastState"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastState};
        
        
        methodMap_["airplayState"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayState};
        
        
        methodMap_["chromecastStart"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastStart};
        
        
        methodMap_["chromecastStop"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastStop};
        
        
        methodMap_["chromecastJoin"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastJoin};
        
        
        methodMap_["chromecastLeave"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_chromecastLeave};
        
        
        methodMap_["airplayStart"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayStart};
        
        
        methodMap_["airplayStop"] = MethodMetadata {1, __hostFunction_NativeCastModuleSpecJSI_airplayStop};
        
  }
} // namespace facebook::react

@implementation NativeContentProtectionModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_registerContentProtectionIntegration(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "registerContentProtectionIntegration", @selector(registerContentProtectionIntegration:keySystemId:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onBuildProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onBuildProcessed", @selector(onBuildProcessed:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsCertificate(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onCertificateRequestProcessedAsCertificate", @selector(onCertificateRequestProcessedAsCertificate:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsRequest(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onCertificateRequestProcessedAsRequest", @selector(onCertificateRequestProcessedAsRequest:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateResponseProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onCertificateResponseProcessed", @selector(onCertificateResponseProcessed:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsLicense(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onLicenseRequestProcessedAsLicense", @selector(onLicenseRequestProcessedAsLicense:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsRequest(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onLicenseRequestProcessedAsRequest", @selector(onLicenseRequestProcessedAsRequest:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseResponseProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onLicenseResponseProcessed", @selector(onLicenseResponseProcessed:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeContentProtectionModuleSpecJSI_onExtractFairplayContentIdProcessed(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "onExtractFairplayContentIdProcessed", @selector(onExtractFairplayContentIdProcessed:), args, count);
    }

  NativeContentProtectionModuleSpecJSI::NativeContentProtectionModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["registerContentProtectionIntegration"] = MethodMetadata {2, __hostFunction_NativeContentProtectionModuleSpecJSI_registerContentProtectionIntegration};
        
        
        methodMap_["onBuildProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onBuildProcessed};
        
        
        methodMap_["onCertificateRequestProcessedAsCertificate"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsCertificate};
        
        
        methodMap_["onCertificateRequestProcessedAsRequest"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateRequestProcessedAsRequest};
        
        
        methodMap_["onCertificateResponseProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onCertificateResponseProcessed};
        
        
        methodMap_["onLicenseRequestProcessedAsLicense"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsLicense};
        
        
        methodMap_["onLicenseRequestProcessedAsRequest"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseRequestProcessedAsRequest};
        
        
        methodMap_["onLicenseResponseProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onLicenseResponseProcessed};
        
        
        methodMap_["onExtractFairplayContentIdProcessed"] = MethodMetadata {1, __hostFunction_NativeContentProtectionModuleSpecJSI_onExtractFairplayContentIdProcessed};
        
  }
} // namespace facebook::react

@implementation NativeEventBroadcastModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeEventBroadcastModuleSpecJSI_broadcastEvent(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "broadcastEvent", @selector(broadcastEvent:event:), args, count);
    }

  NativeEventBroadcastModuleSpecJSI::NativeEventBroadcastModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["broadcastEvent"] = MethodMetadata {2, __hostFunction_NativeEventBroadcastModuleSpecJSI_broadcastEvent};
        
  }
} // namespace facebook::react

@implementation NativePlaybackSettingsModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativePlaybackSettingsModuleSpecJSI_useFastStartup(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "useFastStartup", @selector(useFastStartup:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlaybackSettingsModuleSpecJSI_setLipSyncCorrection(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setLipSyncCorrection", @selector(setLipSyncCorrection:), args, count);
    }

  NativePlaybackSettingsModuleSpecJSI::NativePlaybackSettingsModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["useFastStartup"] = MethodMetadata {1, __hostFunction_NativePlaybackSettingsModuleSpecJSI_useFastStartup};
        
        
        methodMap_["setLipSyncCorrection"] = MethodMetadata {1, __hostFunction_NativePlaybackSettingsModuleSpecJSI_setLipSyncCorrection};
        
  }
} // namespace facebook::react

@implementation NativePlayerModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_version(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "version", @selector(version:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPreload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setPreload", @selector(setPreload:type:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setCurrentTime(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setCurrentTime", @selector(setCurrentTime:seekTime:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPipConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setPipConfig", @selector(setPipConfig:config:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setBackgroundAudioConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setBackgroundAudioConfig", @selector(setBackgroundAudioConfig:config:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPresentationMode(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setPresentationMode", @selector(setPresentationMode:mode:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setMuted(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setMuted", @selector(setMuted:muted:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPlaybackRate(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setPlaybackRate", @selector(setPlaybackRate:rate:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSelectedAudioTrack(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setSelectedAudioTrack", @selector(setSelectedAudioTrack:trackUid:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSelectedVideoTrack(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setSelectedVideoTrack", @selector(setSelectedVideoTrack:trackUid:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSelectedTextTrack(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setSelectedTextTrack", @selector(setSelectedTextTrack:trackUid:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setSource(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setSource", @selector(setSource:source:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setTargetVideoQuality(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setTargetVideoQuality", @selector(setTargetVideoQuality:qualities:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setVolume(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setVolume", @selector(setVolume:volume:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setAspectRatio(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setAspectRatio", @selector(setAspectRatio:ratio:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setRenderingTarget(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setRenderingTarget", @selector(setRenderingTarget:target:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setKeepScreenOn(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setKeepScreenOn", @selector(setKeepScreenOn:keepScreenOn:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setPaused(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setPaused", @selector(setPaused:paused:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setTextTrackStyle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setTextTrackStyle", @selector(setTextTrackStyle:style:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativePlayerModuleSpecJSI_setABRConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setABRConfig", @selector(setABRConfig:config:), args, count);
    }

  NativePlayerModuleSpecJSI::NativePlayerModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["version"] = MethodMetadata {0, __hostFunction_NativePlayerModuleSpecJSI_version};
        
        
        methodMap_["setPreload"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPreload};
        
        
        methodMap_["setCurrentTime"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setCurrentTime};
        
        
        methodMap_["setPipConfig"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPipConfig};
        
        
        methodMap_["setBackgroundAudioConfig"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setBackgroundAudioConfig};
        
        
        methodMap_["setPresentationMode"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPresentationMode};
        
        
        methodMap_["setMuted"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setMuted};
        
        
        methodMap_["setPlaybackRate"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPlaybackRate};
        
        
        methodMap_["setSelectedAudioTrack"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSelectedAudioTrack};
        
        
        methodMap_["setSelectedVideoTrack"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSelectedVideoTrack};
        
        
        methodMap_["setSelectedTextTrack"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSelectedTextTrack};
        
        
        methodMap_["setSource"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setSource};
        
        
        methodMap_["setTargetVideoQuality"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setTargetVideoQuality};
        
        
        methodMap_["setVolume"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setVolume};
        
        
        methodMap_["setAspectRatio"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setAspectRatio};
        
        
        methodMap_["setRenderingTarget"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setRenderingTarget};
        
        
        methodMap_["setKeepScreenOn"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setKeepScreenOn};
        
        
        methodMap_["setPaused"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setPaused};
        
        
        methodMap_["setTextTrackStyle"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setTextTrackStyle};
        
        
        methodMap_["setABRConfig"] = MethodMetadata {2, __hostFunction_NativePlayerModuleSpecJSI_setABRConfig};
        
  }
} // namespace facebook::react
